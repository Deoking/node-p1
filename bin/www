#!/usr/bin/env node
/**
 * 서버 설정 및 이벤트 관리.
 * request 처리 및 예외처리는 app 모듈에서 모두 처리 --> ../app.js
 */

//express 서버를 정의한 모듈
var app = require('../app');
//debug 모듈
var debug = require('debug')('node:server');
//http 서버
var http = require('http');
//socket io를 http 서버에 연결
var io = require('socket.io')(http);



/**
 * Express 환경설정 저장소에서 포트를 가져와 세팅. 포트번호가 없으면 기본 3000번으로 세팅
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * HTTP 서버 생성
 */

var server = http.createServer(app);

/**
 * 리스너 및 이벤트 설정
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
debug('server started');
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * 에러이벤트 
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * 리스너이벤트
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
